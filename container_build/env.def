Bootstrap: docker
From: pytorch/pytorch:2.1.2-cuda12.1-cudnn8-devel

%labels
    Author "Anders Bue"
    Version 1.0
    Description "Container with PyTorch, TRL, and flash-attention for GRPO experiments"

%environment
    export LC_ALL=C
    export PATH="/opt/conda/bin:$PATH"
    export CUDA_HOME="/usr/local/cuda"
    export LD_LIBRARY_PATH="/usr/local/cuda/lib64:$LD_LIBRARY_PATH"
    export TORCH_CUDA_ARCH_LIST="7.0;7.5;8.0;8.6;9.0"

%post
    # Prevent interactive prompts
    export DEBIAN_FRONTEND=noninteractive
    
    # Create log directory to track installation process
    mkdir -p /opt/install_logs
    
    # System update and dependencies
    echo "Installing system dependencies..." > /opt/install_logs/01_system.log
    apt-get update && apt-get install -y --no-install-recommends \
        git \
        curl \
        vim \
        wget \
        build-essential \
        ca-certificates \
        libjpeg-dev \
        libpng-dev \
        libopenblas-dev \
        ninja-build \
        cmake \
        && rm -rf /var/lib/apt/lists/* 2>&1 | tee -a /opt/install_logs/01_system.log
    
    # Ensure CUDA environment is properly set
    echo "Setting up CUDA environment..." > /opt/install_logs/02_cuda_env.log
    echo 'export CUDA_HOME="/usr/local/cuda"' >> /etc/bash.bashrc
    echo 'export PATH="/usr/local/cuda/bin:$PATH"' >> /etc/bash.bashrc
    echo 'export LD_LIBRARY_PATH="/usr/local/cuda/lib64:$LD_LIBRARY_PATH"' >> /etc/bash.bashrc
    echo 'export TORCH_CUDA_ARCH_LIST="7.0;7.5;8.0;8.6;9.0"' >> /etc/bash.bashrc
    
    # Verify CUDA setup
    nvcc --version 2>&1 | tee -a /opt/install_logs/02_cuda_env.log
    
    # Upgrade pip and install base dependencies
    echo "Upgrading pip and installing base dependencies..." > /opt/install_logs/03_pip_base.log
    pip install --no-cache-dir --upgrade pip 2>&1 | tee -a /opt/install_logs/03_pip_base.log
    pip install --no-cache-dir \
        numpy==1.24.3 \
        packaging==23.1 \
        wheel==0.40.0 \
        setuptools==67.8.0 \
        2>&1 | tee -a /opt/install_logs/03_pip_base.log
    
    # Install HuggingFace ecosystem with version pinning
    echo "Installing HuggingFace ecosystem..." > /opt/install_logs/04_hf_ecosystem.log
    pip install --no-cache-dir \
        transformers==4.35.2 \
        datasets==2.14.6 \
        accelerate==0.25.0 \
        peft==0.6.2 \
        evaluate==0.4.1 \
        sentencepiece==0.1.99 \
        protobuf==3.20.3 \
        tokenizers==0.15.0 \
        safetensors==0.4.3 \
        2>&1 | tee -a /opt/install_logs/04_hf_ecosystem.log
    
    # Install flash-attention prerequisites
    echo "Installing flash-attention prerequisites..." > /opt/install_logs/05_flash_prereq.log
    pip install --no-cache-dir \
        einops==0.7.0 \
        triton==2.1.0 \
        2>&1 | tee -a /opt/install_logs/05_flash_prereq.log
    
    # Install flash-attention with improved fallback methods
    echo "Installing flash-attention..." > /opt/install_logs/06_flash_attn.log
    pip install --no-cache-dir flash-attn==2.3.0 2>&1 | tee -a /opt/install_logs/06_flash_attn.log || \
    (echo "Standard install failed, trying older version..." | tee -a /opt/install_logs/06_flash_attn.log && \
     pip install --no-cache-dir flash-attn==2.2.5 2>&1 | tee -a /opt/install_logs/06_flash_attn.log) || \
    (echo "Pip install failed, installing prerequisites..." | tee -a /opt/install_logs/06_flash_attn.log && \
     pip install --no-cache-dir ninja einops 2>&1 | tee -a /opt/install_logs/06_flash_attn.log && \
     cd /tmp && \
     git clone https://github.com/Dao-AILab/flash-attention.git && \
     cd flash-attention && \
     git checkout v2.3.0 && \
     pip install --no-build-isolation . 2>&1 | tee -a /opt/install_logs/06_flash_attn.log)
    
    # Verify flash-attention installation
    python -c "import flash_attn; print(f'Flash-attention installed: {flash_attn.__version__}')" 2>&1 | tee -a /opt/install_logs/06_flash_attn.log || echo "Flash-attention installation failed" | tee -a /opt/install_logs/06_flash_attn.log
    
    # Before TRL installation, ensure safetensors is properly installed
    echo "Ensuring proper safetensors version..." >> /opt/install_logs/07_trl.log
    pip install --no-cache-dir safetensors>=0.4.3 2>&1 | tee -a /opt/install_logs/07_trl.log

    # Install TRL from source code
    echo "Installing TRL from source code..." >> /opt/install_logs/07_trl.log

    # First, install dependencies that TRL might need
    pip install --no-cache-dir \
        dacite \
        tyro \
        tensorboardX \
        2>&1 | tee -a /opt/install_logs/07_trl.log

    # Clone the repo from our source location
    cd /tmp && \
    mkdir -p trl-source && \
    git clone https://github.com/huggingface/trl.git trl-source 2>&1 | tee -a /opt/install_logs/07_trl.log && \
    cd trl-source && \
    # Checkout a specific version that has GRPOTrainer
    git checkout main 2>&1 | tee -a /opt/install_logs/07_trl.log && \
    # Install in development mode
    pip install -e . 2>&1 | tee -a /opt/install_logs/07_trl.log

    # Verify TRL installation
    echo "Verifying TRL..." >> /opt/install_logs/07_trl.log
    python -c "import trl; print(f'TRL version: {trl.__version__}')" 2>&1 | tee -a /opt/install_logs/07_trl.log

    # Verify GRPOTrainer is available
    python -c "from trl import GRPOConfig; print('GRPOConfig import successful')" 2>&1 | tee -a /opt/install_logs/07_trl.log || \
    echo "GRPO classes not available in this TRL version" | tee -a /opt/install_logs/07_trl.log
    
    # Install additional utility libraries
    echo "Installing additional utilities..." > /opt/install_logs/08_utils.log
    pip install --no-cache-dir \
        rouge-score==0.1.2 \
        nltk==3.8.1 \
        regex==2023.10.3 \
        pandas==2.0.3 \
        scikit-learn==1.3.2 \
        tensorboard==2.15.1 \
        bitsandbytes==0.41.1 \
        pyyaml==6.0.1 \
        2>&1 | tee -a /opt/install_logs/08_utils.log
    
    # Clean up
    echo "Cleaning up..." > /opt/install_logs/09_cleanup.log
    apt-get clean 2>&1 | tee -a /opt/install_logs/09_cleanup.log
    rm -rf /var/lib/apt/lists/* 2>&1 | tee -a /opt/install_logs/09_cleanup.log
    pip cache purge 2>&1 | tee -a /opt/install_logs/09_cleanup.log
    
    # Create installation summary
    echo "Creating installation summary..." > /opt/install_logs/10_summary.log
    pip list 2>&1 | tee -a /opt/install_logs/10_summary.log
    
    echo "Container build completed successfully" | tee -a /opt/install_logs/10_summary.log

%test
    #!/bin/bash
    set -e
    echo "Running container tests..."
    
    echo "1. Testing PyTorch installation..."
    python -c "import torch; print(f'PyTorch {torch.__version__}')"
    
    echo "2. Testing flash-attention installation..."
    python -c "import flash_attn; print(f'Flash-attention {flash_attn.__version__}')"
    
    echo "3. Testing TRL installation..."
    python -c "import trl; print(f'TRL {trl.__version__}')"
    
    echo "4. Testing TRL GRPO classes..."
    python -c "from trl import GRPOConfig; print('GRPOConfig import successful')"
    
    echo "5. Testing Transformers installation..."
    python -c "import transformers; print(f'Transformers {transformers.__version__}')"
    
    echo "6. Testing minimal PEFT model creation..."
    python -c "from peft import LoraConfig; config = LoraConfig(r=8, lora_alpha=32, target_modules=['q_proj', 'v_proj']); print('PEFT config creation successful')"
    
    echo "All tests passed successfully!"

%runscript
    exec python "$@" 